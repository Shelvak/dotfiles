" Plugins settings
" ========================================
" ALE linter
" ========================================
let g:ale_linters={
\  'eruby': ['erb'],
\  'javascript': ['eslint'],
\  'jsx': ['eslint'],
\  'elixir': ['elixir-ls']
\ }
let g:ale_fixers={ 'elixir': ['mix_format'] }
let g:ale_elixir_elixir_ls_release='/home/rotsen/tmp/elixir-ls'
let g:ale_elixir_elixir_ls_config = { 'elixirLS': { 'dialyzerEnabled': v:false } }
let g:ale_ruby_rubocop_executable='/home/rotsen/.gem/ruby/2.6.6/bin/rubocop'
let g:ale_ruby_ruby_executable='/home/rotsen/.rubies/ruby-2.6.6/bin/ruby'
let g:ale_fix_on_save = 0
let g:ale_lint_on_enter = 0
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed='never'
let g:ale_linters_explicit = 0
let g:ale_set_highlights = 0
nnoremap <F8> :ALEFix<CR>

" ========================================
" FZF setup
" ========================================
let g:grep_operator = 'rg'
let g:fzf_nvim_statusline=0
let g:fzf_preview_window = ''
let g:fzf_layout = { 'down': '30%' }
set grepprg=rg\ —vimgrep

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --follow --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

command! -bang -nargs=* Rgi
  \ call fzf#vim#grep(
  \   'rg -i --column --line-number --follow --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

function! SearchDefWithRg()
  " Ultra searcher viejaaa
  execute 'Rg' 'def[p]? [self\.]?'.expand('<cword>').'|module '.expand('<cword>').'|class '.expand('<cword>').'|^'.expand('<cword>')'\s?='
endfunction

function! SearchVisualSelectionWithRg() range
  let old_reg = getreg('"')
  let old_regtype = getregtype('"')
  let old_clipboard = &clipboard
  set clipboard&
  normal! ""gvy
  let selection = getreg('"')
  call setreg('"', old_reg, old_regtype)
  let &clipboard = old_clipboard
  execute 'Rg' selection
endfunction

" ========================================
" FZF - shortcuts
" ========================================
nnoremap <silent> <leader>t :Files<CR>
nnoremap <silent> · :call SearchDefWithRg()<CR>
vnoremap <silent> · :call SearchVisualSelectionWithRg()<CR>

" ========================================
" SmartColumns
" ========================================
let g:smart_display_opts = {'guibg': 'Blue', 'column': '81'}
let g:smart_display_alternative_opts = {'guibg': 'Red', 'column': '121'}

" ========================================
" Gist-vim
" ========================================
let g:gist_detect_filetype = 1
let g:gist_clip_command = 'xclip -selection clipboard'

" ========================================
" GitGutter
" ========================================
let g:gitgutter_enabled = 0
hi SignColumn ctermbg=none

" ========================================
" Vim-ruby
" ========================================
" Highlight any custom method starting with assert_
syn match rubyTestMacro 'assert_\w\+'

" ========================================
" Vim Rails - shortcuts
" ========================================
nnoremap <Leader>m :Emodel
nnoremap <Leader>c :Econtroller
nnoremap <Leader>v :Eview
nnoremap <Leader>u :Eunittest
nnoremap <Leader>f :Efunctionaltest

" ========================================
" Vim Fugitive - shortcuts
" ========================================
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit<CR>

" ========================================
" StripWhiteSpaces
" ========================================
let g:strip_trailing_lines = 1

" ========================================
" SnipMate
" ========================================
let g:snipMate = { 'snippet_version' : 1 }
