# run server on current dir
localserver() {
  port=8888
  if [ "$1" != "" ]; then
    port=$1
  fi

  ruby -run -e httpd . -p $port -b 0.0.0.0
}

# Sub arg1 with arg2 on current dir
sustituir() {
  egrep -rl "$1" * | xargs sed -i "s/$1/$2/g"
}

sustituir_en() {
  egrep -rl "$1" $3 | xargs sed -i "s/$1/$2/g"
}

# Limpiar temporales de vim
clean_vim_temps() {
  find . -name "*.sw[o|p]" | xargs rm
}

# cclimate() {
#   docker run --interactive --tty --rm --env CODECLIMATE_CODE="$PWD" \
#     -v $PWD:/code \
#     -v /var/run/docker.sock:/var/run/docker.sock \
#     -v /tmp/cc:/tmp/cc \
#     codeclimate/codeclimate analyze $1
# }

# Fetch and checkout to remote branch
gfco() {
  git fetch origin $1
  git checkout origin/$1
  git checkout -b $1
}

# Search in git dir and go
cr() { cd ~/git/$1; }
_cr() { _files -W ~/git -/; }
compdef _cr cr

# Search in git dir and go in splitted window
cs() { tmux split-window -v -c ~/git/$1; }
_cs() { _files -W ~/git -/; }
compdef _cs cs

# Rails test from path
# t() { RAILS_ENV=test rails test test/$1; }
# _t() { _files -W $PWD/test -/; }
# compdef _t t

vrb() { vim ~/tmp/$(date -u '+%Y'.'%m'.'%d'_'%H'.'%M'.'%S').rb }
vjs() { vim ~/tmp/$(date -u '+%Y'.'%m'.'%d'_'%H'.'%M'.'%S').js }

# Clone the current function && try to eval first with ruby
_cnfh="$(declare -f command_not_found_handler)"
eval "function original_command_not_found_handler ${_cnfh#*"()"}"
unset _cnfh

command_not_found_handler() {
  ruby -e "require 'active_support/all'; require 'amazing_print'; ap eval(ARGV.join(' '))" $@ 2>/dev/null

  result=$?

  if [ $result != 0 ]; then
    original_command_not_found_handler "$@"
  fi
}

# Use scripts dir as bin
script() { ~/scripts/$1 ${@:2}; }
_script() { _files -W ~/scripts -/; }
compdef _script script

run_cursor() {
  # let's create a variable with the current dir name
  local dir_name="/$(basename "$PWD")"
  local d_home="$HOME/git/dockeraso/volumes"
  docker run --rm --name "cursor-$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 16)" \
    -v "$d_home/cursor:/home/cursor/.cursor" \
    -v "$d_home/cursor-config:/home/cursor/.config" \
    -v "$d_home/common/docker_rsa:/home/cursor/.ssh/id_rsa:ro" \
    -v "$d_home/common/docker_rsa.pub:/home/cursor/.ssh/id_rsa.pub:ro" \
    -v "/tmp/.X11-unix:/tmp/.X11-unix" \
    -v "$PWD:$dir_name" \
    -w "$dir_name" \
    -e DISPLAY=$DISPLAY \
    dockeraso-cursor:latest $dir_name # init in the current dir
}
